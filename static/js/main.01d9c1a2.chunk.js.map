{"version":3,"sources":["utils/webgl-utils.js","components/Forwarder.js","components/Framework.js","App.js","index.js"],"names":["root","factory","Forwarder","history","useHistory","useEffect","push","webglUtils","w","topWindow","this","error","msg","console","log","top","errorRE","addLineNumbersWithError","src","matches","matchAll","lineNoToErrorMap","Map","map","m","ndx","lineNo","parseInt","next","end","index","length","substring","split","line","err","get","join","loadShader","gl","shaderSource","shaderType","opt_errorCallback","errFn","shader","createShader","compileShader","getShaderParameter","COMPILE_STATUS","lastError","getShaderInfoLog","deleteShader","createProgram","shaders","opt_attribs","opt_locations","program","forEach","attachShader","attrib","bindAttribLocation","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","getShaderSource","type","SHADER_TYPE","EnumToString","deleteProgram","createShaderFromScript","scriptId","opt_shaderType","shaderScript","document","getElementById","text","VERTEX_SHADER","FRAGMENT_SHADER","defaultShaderType","createProgramFromScripts","shaderScriptIds","ii","createProgramFromSources","shaderSources","resizeCanvasToDisplaySize","canvas","multiplier","width","clientWidth","height","clientHeight","define","call","Framework","source","querySelector","getContext","Error","vertexShader","fragmentShader","positionAttributeLocation","getAttribLocation","positionBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","STATIC_DRAW","vao","createVertexArray","bindVertexArray","enableVertexAttribArray","FLOAT","offset","vertexAttribPointer","viewport","clearColor","clear","CLEAR_BUFFER_BIT","useProgram","primitiveType","TRIANGLES","drawArrays","id","App","exact","path","to","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.01d9c1a2.chunk.js","sourcesContent":["/*\n * Copyright 2021, GFXFundamentals.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of GFXFundamentals. nor the names of his\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/* global define */\nconst webglUtils = (function(root, factory) {  // eslint-disable-line\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([], function() {\n      return factory.call(root);\n    });\n  } else {\n    // Browser globals\n    root.webglUtils = factory.call(root);\n  }\n}(this, function() {\n  \"use strict\";\n\n  const topWindow = this;\n\n  /** @module webgl-utils */\n\n  function isInIFrame(w) {\n    w = w || topWindow;\n    return w !== w.top;\n  }\n\n  if (!isInIFrame()) {\n    console.log(\"%c%s\", 'color:blue;font-weight:bold;', 'for more about webgl-utils.js see:');  // eslint-disable-line\n    console.log(\"%c%s\", 'color:blue;font-weight:bold;', 'http://webgl2fundamentals.org/webgl/lessons/webgl-boilerplate.html');  // eslint-disable-line\n  }\n\n  /**\n   * Wrapped logging function.\n   * @param {string} msg The message to log.\n   */\n  function error(msg) {\n    if (topWindow.console) {\n      if (topWindow.console.error) {\n        topWindow.console.error(msg);\n      } else if (topWindow.console.log) {\n        topWindow.console.log(msg);\n      }\n    }\n  }\n\n  const errorRE = /ERROR:\\s*\\d+:(\\d+)/gi;\n  function addLineNumbersWithError(src, log = '') {\n    // Note: Error message formats are not defined by any spec so this may or may not work.\n    const matches = [...log.matchAll(errorRE)];\n    const lineNoToErrorMap = new Map(matches.map((m, ndx) => {\n      const lineNo = parseInt(m[1]);\n      const next = matches[ndx + 1];\n      const end = next ? next.index : log.length;\n      const msg = log.substring(m.index, end);\n      return [lineNo - 1, msg];\n    }));\n    return src.split('\\n').map((line, lineNo) => {\n      const err = lineNoToErrorMap.get(lineNo);\n      return `${lineNo + 1}: ${line}${err ? `\\n\\n^^^ ${err}` : ''}`;\n    }).join('\\n');\n  }\n\n\n  /**\n   * Error Callback\n   * @callback ErrorCallback\n   * @param {string} msg error message.\n   * @memberOf module:webgl-utils\n   */\n\n  /**\n   * Loads a shader.\n   * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n   * @param {string} shaderSource The shader source.\n   * @param {number} shaderType The type of shader.\n   * @param {module:webgl-utils.ErrorCallback} opt_errorCallback callback for errors.\n   * @return {WebGLShader} The created shader.\n   */\n  function loadShader(gl, shaderSource, shaderType, opt_errorCallback) {\n    const errFn = opt_errorCallback || error;\n    // Create the shader object\n    const shader = gl.createShader(shaderType);\n\n    // Load the shader source\n    gl.shaderSource(shader, shaderSource);\n\n    // Compile the shader\n    gl.compileShader(shader);\n\n    // Check the compile status\n    const compiled = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n    if (!compiled) {\n      // Something went wrong during compilation; get the error\n      const lastError = gl.getShaderInfoLog(shader);\n      errFn(`Error compiling shader: ${lastError}\\n${addLineNumbersWithError(shaderSource, lastError)}`);\n      gl.deleteShader(shader);\n      return null;\n    }\n\n    return shader;\n  }\n\n  /**\n   * Creates a program, attaches shaders, binds attrib locations, links the\n   * program and calls useProgram.\n   * @param {WebGLShader[]} shaders The shaders to attach\n   * @param {string[]} [opt_attribs] An array of attribs names. Locations will be assigned by index if not passed in\n   * @param {number[]} [opt_locations] The locations for the. A parallel array to opt_attribs letting you assign locations.\n   * @param {module:webgl-utils.ErrorCallback} opt_errorCallback callback for errors. By default it just prints an error to the console\n   *        on error. If you want something else pass an callback. It's passed an error message.\n   * @memberOf module:webgl-utils\n   */\n  function createProgram(\n      gl, shaders, opt_attribs, opt_locations, opt_errorCallback) {\n    const errFn = opt_errorCallback || error;\n    const program = gl.createProgram();\n    shaders.forEach(function(shader) {\n      gl.attachShader(program, shader);\n    });\n    if (opt_attribs) {\n      opt_attribs.forEach(function(attrib, ndx) {\n        gl.bindAttribLocation(\n            program,\n            opt_locations ? opt_locations[ndx] : ndx,\n            attrib);\n      });\n    }\n    gl.linkProgram(program);\n\n    // Check the link status\n    const linked = gl.getProgramParameter(program, gl.LINK_STATUS);\n    if (!linked) {\n        // something went wrong with the link\n        const lastError = gl.getProgramInfoLog(program);\n        errFn(`Error in program linking: ${lastError}\\n${\n          shaders.map(shader => {\n            const src = addLineNumbersWithError(gl.getShaderSource(shader));\n            const type = gl.getShaderParameter(shader, gl.SHADER_TYPE);\n            return `${gl.EnumToString(gl, type)}:\\n${src}`;\n          }).join('\\n')\n        }`);\n\n        gl.deleteProgram(program);\n        return null;\n    }\n    return program;\n  }\n\n  /**\n   * Loads a shader from a script tag.\n   * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n   * @param {string} scriptId The id of the script tag.\n   * @param {number} opt_shaderType The type of shader. If not passed in it will\n   *     be derived from the type of the script tag.\n   * @param {module:webgl-utils.ErrorCallback} opt_errorCallback callback for errors.\n   * @return {WebGLShader} The created shader.\n   */\n  function createShaderFromScript(\n      gl, scriptId, opt_shaderType, opt_errorCallback) {\n    let shaderSource = \"\";\n    let shaderType;\n    const shaderScript = document.getElementById(scriptId);\n    if (!shaderScript) {\n      throw (\"*** Error: unknown script element\" + scriptId);\n    }\n    shaderSource = shaderScript.text;\n\n    if (!opt_shaderType) {\n      if (shaderScript.type === \"x-shader/x-vertex\") {\n        shaderType = gl.VERTEX_SHADER;\n      } else if (shaderScript.type === \"x-shader/x-fragment\") {\n        shaderType = gl.FRAGMENT_SHADER;\n      } else if (shaderType !== gl.VERTEX_SHADER && shaderType !== gl.FRAGMENT_SHADER) {\n        throw (\"*** Error: unknown shader type\");\n      }\n    }\n\n    return loadShader(\n        gl, shaderSource, opt_shaderType ? opt_shaderType : shaderType,\n        opt_errorCallback);\n  }\n\n  const defaultShaderType = [\n    \"VERTEX_SHADER\",\n    \"FRAGMENT_SHADER\",\n  ];\n\n  /**\n   * Creates a program from 2 script tags.\n   *\n   * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n   *        to use.\n   * @param {string[]} shaderScriptIds Array of ids of the script\n   *        tags for the shaders. The first is assumed to be the\n   *        vertex shader, the second the fragment shader.\n   * @param {string[]} [opt_attribs] An array of attribs names. Locations will be assigned by index if not passed in\n   * @param {number[]} [opt_locations] The locations for the. A parallel array to opt_attribs letting you assign locations.\n   * @param {module:webgl-utils.ErrorCallback} opt_errorCallback callback for errors. By default it just prints an error to the console\n   *        on error. If you want something else pass an callback. It's passed an error message.\n   * @return {WebGLProgram} The created program.\n   * @memberOf module:webgl-utils\n   */\n  function createProgramFromScripts(\n      gl, shaderScriptIds, opt_attribs, opt_locations, opt_errorCallback) {\n    const shaders = [];\n    for (let ii = 0; ii < shaderScriptIds.length; ++ii) {\n      shaders.push(createShaderFromScript(\n          gl, shaderScriptIds[ii], gl[defaultShaderType[ii]], opt_errorCallback));\n    }\n    return createProgram(gl, shaders, opt_attribs, opt_locations, opt_errorCallback);\n  }\n\n  /**\n   * Creates a program from 2 sources.\n   *\n   * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n   *        to use.\n   * @param {string[]} shaderSourcess Array of sources for the\n   *        shaders. The first is assumed to be the vertex shader,\n   *        the second the fragment shader.\n   * @param {string[]} [opt_attribs] An array of attribs names. Locations will be assigned by index if not passed in\n   * @param {number[]} [opt_locations] The locations for the. A parallel array to opt_attribs letting you assign locations.\n   * @param {module:webgl-utils.ErrorCallback} opt_errorCallback callback for errors. By default it just prints an error to the console\n   *        on error. If you want something else pass an callback. It's passed an error message.\n   * @return {WebGLProgram} The created program.\n   * @memberOf module:webgl-utils\n   */\n  function createProgramFromSources(\n      gl, shaderSources, opt_attribs, opt_locations, opt_errorCallback) {\n    const shaders = [];\n    for (let ii = 0; ii < shaderSources.length; ++ii) {\n      shaders.push(loadShader(\n          gl, shaderSources[ii], gl[defaultShaderType[ii]], opt_errorCallback));\n    }\n    return createProgram(gl, shaders, opt_attribs, opt_locations, opt_errorCallback);\n  }\n\n  /**\n   * Resize a canvas to match the size its displayed.\n   * @param {HTMLCanvasElement} canvas The canvas to resize.\n   * @param {number} [multiplier] amount to multiply by.\n   *    Pass in window.devicePixelRatio for native pixels.\n   * @return {boolean} true if the canvas was resized.\n   * @memberOf module:webgl-utils\n   */\n  function resizeCanvasToDisplaySize(canvas, multiplier) {\n    multiplier = multiplier || 1;\n    const width  = canvas.clientWidth  * multiplier | 0;\n    const height = canvas.clientHeight * multiplier | 0;\n    if (canvas.width !== width ||  canvas.height !== height) {\n      canvas.width  = width;\n      canvas.height = height;\n      return true;\n    }\n    return false;\n  }\n\n  return {\n    createProgram: createProgram,\n    createProgramFromScripts: createProgramFromScripts,\n    createProgramFromSources: createProgramFromSources,\n    resizeCanvasToDisplaySize: resizeCanvasToDisplaySize,\n  };\n\n}));\n\n\nexport default webglUtils;","import { useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nconst Forwarder = () => {\n  const history = useHistory();\n  useEffect(() => {\n    history.push(\"/framework\");\n  });\n  return null;\n};\n\nexport default Forwarder;","import { useEffect } from \"react\";\nimport webglUtils from \"../utils/webgl-utils.js\";\n\nconst Framework = () => {\n  const createShader = (gl, type, source) => {\n    let shader = gl.createShader(type);\n    gl.shaderSource(shader, source);\n    gl.compileShader(shader);\n    let success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n    if (success) {\n      return shader;\n    }\n\n    console.log(gl.getShaderInfoLog(shader));\n    gl.deleteShader(shader);\n  };\n\n  const createProgram = (gl, vertexShader, fragmentShader) => {\n    let program = gl.createProgram();\n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragmentShader);\n    gl.linkProgram(program);\n    let success = gl.getProgramParameter(program, gl.LINK_STATUS);\n    if (success) {\n      return program;\n    }\n    console.log(gl.getProgramInfoLog(program));\n    gl.deleteProgram(program);\n  };\n\n  useEffect(() => {\n    let canvas = document.querySelector(\"#c\");\n    let gl = canvas.getContext(\"webgl2\");\n    if (!gl) throw new Error(\"no gl2 for you\");\n    var vertexShaderSource = `#version 300 es\n \n// an attribute is an input (in) to a vertex shader.\n// It will receive data from a buffer\nin vec4 a_position;\n \n// all shaders have a main function\nvoid main() {\n \n  // gl_Position is a special variable a vertex shader\n  // is responsible for setting\n  gl_Position = a_position;\n}\n`;\n\n    var fragmentShaderSource = `#version 300 es\n \n// fragment shaders don't have a default precision so we need\n// to pick one. highp is a good default. It means \"high precision\"\nprecision highp float;\n \n// we need to declare an output for the fragment shader\nout vec4 outColor;\n \nvoid main() {\n  // Just set the output to a constant reddish-purple\n  outColor = vec4(1, 0, 0.5, 1);\n}\n`;\n    let vertexShader = createShader(gl, gl.VERTEX_SHADER, vertexShaderSource);\n    let fragmentShader = createShader(\n      gl,\n      gl.FRAGMENT_SHADER,\n      fragmentShaderSource\n    );\n\n    let program = createProgram(gl, vertexShader, fragmentShader);\n\n    let positionAttributeLocation = gl.getAttribLocation(program, \"a_position\");\n    let positionBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n    var positions = [0, 0, 0, 0.5, 0.7, 0];\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(positions), gl.STATIC_DRAW);\n    let vao = gl.createVertexArray();\n    gl.bindVertexArray(vao);\n    gl.enableVertexAttribArray(positionAttributeLocation);\n    let size = 2;\n    let type = gl.FLOAT;\n    let normalize = false;\n    let stride = 0;\n    let offset = 0;\n    gl.vertexAttribPointer(\n      positionAttributeLocation,\n      size,\n      type,\n      normalize,\n      stride,\n      offset\n    );\n    webglUtils.resizeCanvasToDisplaySize(gl.canvas);\n    gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\n    gl.clearColor(0, 0, 0, 0);\n    gl.clear(gl.CLEAR_BUFFER_BIT);\n    gl.useProgram(program);\n    gl.bindVertexArray(vao);\n    let primitiveType = gl.TRIANGLES;\n    offset = 0;\n    let count = 3;\n    gl.drawArrays(primitiveType, offset, count);\n\n\n  });\n\n  return <canvas id=\"c\" height=\"480\" width=\"640\" ></canvas>;\n};\n\nexport default Framework;\n","import \"./App.css\";\nimport { Link, BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Forwarder from \"./components/Forwarder\";\nimport Framework from \"./components/Framework\";\n\nconst App = () => {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/\">\n          <Forwarder />\n        </Route>\n        <Route exact path=\"/framework/\">\n          <Link to=\"framework/play\">play</Link>\n        </Route>\n        <Route path=\"/framework/play\">\n          <Framework />\n        </Route>\n        <Route path=\"/:whatever\">\n          <p>page not found</p>\n        </Route>\n      </Switch>\n    </Router>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}